@model List<AppView.ViewModels.GioHang.GioHangView>

@{
    ViewData["Title"] = "Giỏ hàng";
}

<style>
    .cart-table {
        width: 100%;
        margin-top: 20px;
    }

    .btn-update, .btn-delete {
        margin-right: 5px;
    }

    .quantity-input {
        width: 80px;
    }

    .checkbox-select {
        margin-right: 10px;
    }

    .btn-checkout {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
    }

        .btn-checkout:hover {
            background-color: #45a049;
        }
</style>

<div class="container mt-5">
    <h2 class="text-center mb-4">Giỏ hàng</h2>
    @if (!string.IsNullOrEmpty(ViewBag.Error))
    {
        <div class="alert alert-danger">@ViewBag.Error</div>
    }
    @if (Model == null || !Model.Any())
    {
        <p>Giỏ hàng trống.</p>
    }
    else
    {
        <table class="cart-table">
            <thead>
                <tr>
                    <th><input type="checkbox" id="select-all" /></th>
                    <th>Sản phẩm</th>
                    <th>Số lượng</th>
                    <th>Đơn giá</th>
                    <th>Tổng</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td><input type="checkbox" class="checkbox-select" data-id="@item.IDGioHangChiTiet" /></td>
                        <td>@item.TenSanPham</td>
                        <td>
                            <input type="number" class="form-control quantity-input" value="@item.SoLuong" min="1" data-id="@item.IDGioHangChiTiet" />
                        </td>
                        <td>@item.DonGia.ToString("N0") VNĐ</td>
                        <td>@(item.SoLuong * item.DonGia).ToString("N0") VNĐ</td>
                        <td>
                            <button class="btn btn-warning btn-sm btn-update" data-id="@item.IDGioHangChiTiet">Cập nhật</button>
                            <button class="btn btn-danger btn-sm btn-delete" data-id="@item.IDGioHangChiTiet">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn-checkout" onclick="checkout()">Thanh toán</button>
    }
</div>

<script>
    const token = '@ViewBag.Token';
    const userId = '@ViewBag.UserId';

    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('btn-update')) {
            const id = e.target.dataset.id;
            const quantityInput = e.target.closest('tr').querySelector('.quantity-input');
            const quantity = parseInt(quantityInput.value) || 1;
            updateCartItem(id, quantity);
        } else if (e.target.classList.contains('btn-delete')) {
            const id = e.target.dataset.id;
            deleteCartItem(id);
        } else if (e.target.id === 'select-all') {
            document.querySelectorAll('.checkbox-select').forEach(cb => cb.checked = e.target.checked);
        }
    });

    async function updateCartItem(id, quantity) {
        try {
            const response = await fetch('https://localhost:7221/api/GioHang/cap-nhat-so-luong', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': token ? `Bearer ${token}` : ''
                },
                body: JSON.stringify({ idGioHangChiTiet: id, soLuong: quantity })
            });
            const result = await response.json();
            if (response.ok) {
                alert(result.message || 'Cập nhật thành công!');
                loadCart(); // Làm mới giao diện
            } else {
                alert(`Cập nhật thất bại: ${result.message || 'Lỗi không xác định'}`);
            }
        } catch (error) {
            console.error('Lỗi kết nối khi cập nhật:', error);
            alert('Lỗi kết nối!');
        }
    }

    async function deleteCartItem(id) {
        try {
            const response = await fetch(`https://localhost:7221/api/GioHang/xoa/${id}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': token ? `Bearer ${token}` : ''
                }
            });
            const result = await response.json();
            if (response.ok) {
                alert(result.message || 'Xóa thành công!');
                const row = document.querySelector(`tr[data-id="${id}"]`);
                if (row) row.remove();
                if (document.querySelectorAll('tbody tr').length === 0) {
                    document.querySelector('tbody').innerHTML = '<tr><td colspan="6">Giỏ hàng trống.</td></tr>';
                }
                loadCart(); // Làm mới giao diện
            } else {
                alert(`Xóa thất bại: ${result.message || 'Lỗi không xác định'}`);
            }
        } catch (error) {
            console.error('Lỗi kết nối khi xóa:', error);
            alert('Lỗi kết nối!');
        }
    }

    async function loadCart() {
        try {
            const response = await fetch(`https://localhost:7221/api/GioHang/lay-gio-hang/${userId}`, {
                headers: {
                    'Authorization': token ? `Bearer ${token}` : ''
                }
            });
            const result = await response.json();
            console.log('LoadCart response:', result); // Log để debug
            if (response.ok) {
                const tbody = document.querySelector('table tbody');
                tbody.innerHTML = '';
                if (result.data && result.data.length > 0) {
                    result.data.forEach(item => {
                        const tenSanPham = item.sanPhamCT && item.sanPhamCT.sanPham ? item.sanPhamCT.sanPham.tenSanPham || 'Không có tên' : 'Không có tên';
                        const donGia = item.donGia || 0;
                        const soLuong = item.soLuong || 1;
                        const tong = soLuong * donGia;
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td><input type="checkbox" class="checkbox-select" data-id="${item.idGioHangChiTiet}"></td>
                            <td>${tenSanPham}</td>
                            <td><input type="number" class="quantity-input" value="${soLuong}" min="1" style="width: 80px;" data-id="${item.idGioHangChiTiet}"></td>
                            <td>${donGia.toLocaleString()} VNĐ</td>
                            <td>${tong.toLocaleString()} VNĐ</td>
                            <td>
                                <button class="btn btn-warning btn-sm btn-update" data-id="${item.idGioHangChiTiet}">Cập nhật</button>
                                <button class="btn btn-danger btn-sm btn-delete" data-id="${item.idGioHangChiTiet}">Xóa</button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6">Giỏ hàng trống.</td></tr>';
                }
            } else {
                console.error('Lỗi tải giỏ hàng:', result);
                document.querySelector('tbody').innerHTML = '<tr><td colspan="6">Lỗi tải giỏ hàng.</td></tr>';
            }
        } catch (error) {
            console.error('Lỗi kết nối trong loadCart:', error);
            document.querySelector('tbody').innerHTML = '<tr><td colspan="6">Lỗi kết nối.</td></tr>';
        }
    }

    window.addEventListener('load', loadCart);

    function checkout() {
        const selectedItems = [];
        document.querySelectorAll('.checkbox-select:checked').forEach(cb => {
            selectedItems.push(cb.dataset.id);
        });
        if (selectedItems.length === 0) {
            alert('Vui lòng chọn ít nhất một sản phẩm để thanh toán!');
            return;
        }
        window.location.href = `/ThanhToan?items=${selectedItems.join(',')}`;
    }
</script>