@using AppView.Areas.Admin.ViewModels
@using AppView.Areas.Admin.ViewModels.ThongKeViewModel
@model CustomerReportViewModel
@{
    ViewData["Title"] = ViewBag.Title ?? "Báo cáo khách hàng";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    var request = ViewBag.Request as TimeRangeRequestViewModel ?? new TimeRangeRequestViewModel();

    // Khởi tạo default values nếu Model null
    var model = Model ?? new CustomerReportViewModel();
    var customerSegments = model?.CustomerSegments ?? new List<CustomerValueViewModel>();
    var customerActivities = model?.CustomerActivities ?? new List<CustomerActivityViewModel>();
}

<style>
    .stats-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 20px;
        color: white;
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
    }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
            pointer-events: none;
        }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .stats-card.revenue {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        .stats-card.orders {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }

        .stats-card.customers {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        }

        .stats-card.activity {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            color: #333;
        }

    .modern-card {
        border: none;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        overflow: hidden;
        background: white;
    }

        .modern-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 50px rgba(0,0,0,0.15);
        }

        .modern-card .card-header {
            background: #fff; /* hoặc background-color: white; */
            color: #333; /* đổi chữ sang màu tối để dễ đọc */
            border: none;
            padding: 20px 25px;
            font-weight: 600;
            position: relative;
        }

            .modern-card .card-header::after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0.3) 100%);
            }

    .filter-form {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        border-radius: 20px;
        padding: 25px;
        color: white;
        margin-bottom: 30px;
    }

        .filter-form .form-control {
            border: none;
            border-radius: 12px;
            padding: 12px 15px;
            background: rgba(255,255,255,0.9);
            transition: all 0.3s ease;
            color: #333;
        }

            .filter-form .form-control:focus {
                background: white;
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                transform: translateY(-2px);
            }

    .btn-modern {
        border: none;
        border-radius: 12px;
        padding: 12px 30px;
        font-weight: 600;
        transition: all 0.3s ease;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            color: white;
        }

    .customer-avatar {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        margin-right: 15px;
    }

    .tier-badge {
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .tier-vip {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
    }

    .tier-gold {
        background: linear-gradient(135deg, #ffd89b 0%, #19547b 100%);
        color: white;
    }

    .tier-silver {
        background: linear-gradient(135deg, #bdc3c7 0%, #2c3e50 100%);
        color: white;
    }

    .tier-standard {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        color: white;
    }

    .value-display {
        font-size: 18px;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        margin: 30px 0;
    }

        .empty-state i {
            font-size: 4rem;
            color: #6c757d;
            margin-bottom: 20px;
            opacity: 0.7;
        }

    .page-header {
        background: #fff; /* hoặc background-color: white; */
        color: #333; /* đổi chữ sang màu tối để dễ đọc */
        padding: 30px 0;
        margin: -20px -15px 30px -15px;
        border-radius: 0 0 30px 30px;
    }

    .data-table-modern {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

        .data-table-modern thead th {
            background: #fff; /* hoặc background-color: white; */
            color: #333; /* đổi chữ sang màu tối để dễ đọc */
            border: none;
            padding: 18px 15px;
            font-weight: 600;
        }

        .data-table-modern tbody tr {
            transition: all 0.3s ease;
            border: none;
        }

            .data-table-modern tbody tr:hover {
                background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
                transform: scale(1.01);
            }

        .data-table-modern tbody td {
            border: none;
            padding: 18px 15px;
            vertical-align: middle;
        }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .animate-card {
        animation: fadeInUp 0.6s ease forwards;
    }

    .metric-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        margin-bottom: 10px;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        overflow: hidden;
    }

    .modal-header {
        background: #fff; /* hoặc background-color: white; */
        color: #333; /* đổi chữ sang màu tối để dễ đọc */
        border: none;
        padding: 25px 30px;
    }

        .modal-header .btn-close {
            background: rgba(255,255,255,0.8);
            opacity: 1;
            border-radius: 50%;
            width: 35px;
            height: 35px;
        }

    .modal-body {
        padding: 30px;
        background: #f8f9fa;
    }

    .customer-info-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        margin-bottom: 25px;
    }

    .customer-detail-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 2rem;
        margin-right: 20px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.2);
    }

    .order-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        border-left: 4px solid transparent;
        transition: all 0.3s ease;
    }

        .order-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .order-card.status-completed {
            border-left-color: #28a745;
        }

        .order-card.status-pending {
            border-left-color: #ffc107;
        }

        .order-card.status-cancelled {
            border-left-color: #dc3545;
        }

        .order-card.status-processing {
            border-left-color: #007bff;
        }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-completed {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
    }

    .status-pending {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        color: white;
    }

    .status-cancelled {
        background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
        color: white;
    }

    .status-processing {
        background: linear-gradient(135deg, #007bff 0%, #6610f2 100%);
        color: white;
    }

    .payment-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 11px;
        font-weight: 600;
    }

    .payment-paid {
        background: rgba(40, 167, 69, 0.1);
        color: #28a745;
        border: 1px solid rgba(40, 167, 69, 0.3);
    }

    .payment-unpaid {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.3);
    }

    .order-empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }

        .order-empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }
</style>

<div class="page-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-12">
                <h2 class="mb-0">📊 @ViewData["Title"]</h2>
                <p class="mb-0 mt-2" style="opacity: 0.9;">Phân tích chi tiết về khách hàng và hoạt động kinh doanh</p>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- Error Message -->
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage?.ToString()))
    {
        <div class="alert alert-danger alert-dismissible fade show animate-card" role="alert" style="border-radius: 15px; border: none; box-shadow: 0 5px 20px rgba(220, 53, 69, 0.2);">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @ViewBag.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Debug Information -->
    @if (ViewBag.ShowDebugInfo == true)
    {
        <div class="alert alert-info animate-card" style="border-radius: 15px; border: none;">
            <h6><i class="fas fa-info-circle me-2"></i>Thông tin Debug:</h6>
            <div class="row">
                <div class="col-md-4">
                    <small><strong>Customer Segments:</strong> @customerSegments.Count</small>
                </div>
                <div class="col-md-4">
                    <small><strong>Customer Activities:</strong> @customerActivities.Count</small>
                </div>
                <div class="col-md-4">
                    <small><strong>Model Status:</strong> @(Model != null ? "OK" : "NULL")</small>
                </div>
            </div>
        </div>
    }

    <!-- Filter Form -->
    <div class="filter-form animate-card">
        <div class="d-flex align-items-center mb-3">
            <i class="fas fa-filter me-3" style="font-size: 1.5rem;"></i>
            <h5 class="mb-0">Bộ lọc thời gian</h5>
        </div>
        <form method="post" class="row g-3">
            <div class="col-md-5">
                <label class="form-label fw-bold">📅 Từ ngày</label>
                <input type="date" class="form-control" name="StartDate" value="@(request?.StartDate.ToString("yyyy-MM-dd") ?? DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd"))" />
            </div>
            <div class="col-md-5">
                <label class="form-label fw-bold">📅 Đến ngày</label>
                <input type="date" class="form-control" name="EndDate" value="@(request?.EndDate.ToString("yyyy-MM-dd") ?? DateTime.Now.ToString("yyyy-MM-dd"))" />
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button type="submit" class="btn btn-modern w-100">
                    <i class="fas fa-search me-2"></i>Lọc dữ liệu
                </button>
            </div>
        </form>
    </div>

    <!-- Quick Stats Row -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="stats-card customers h-100 animate-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="metric-icon">👥</div>
                            <h3 class="mb-2">@customerSegments.Count</h3>
                            <p class="mb-0 opacity-75">Tổng khách hàng</p>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-users fa-3x opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card revenue h-100 animate-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="metric-icon">💰</div>
                            <h3 class="mb-2">@(customerSegments.Sum(c => c.LifetimeValue).ToString("N0")) ₫</h3>
                            <p class="mb-0 opacity-75">Tổng giá trị LTV</p>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-chart-line fa-3x opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card orders h-100 animate-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="metric-icon">🛒</div>
                            <h3 class="mb-2">@customerSegments.Sum(c => c.OrderCount)</h3>
                            <p class="mb-0 opacity-75">Tổng đơn hàng</p>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-shopping-cart fa-3x opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card activity h-100 animate-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <div class="metric-icon">📈</div>
                            <h3 class="mb-2">@customerActivities.Sum(a => a.NewCustomers)</h3>
                            <p class="mb-0 opacity-75">Khách hàng mới</p>
                        </div>
                        <div class="text-end">
                            <i class="fas fa-user-plus fa-3x opacity-50"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Customers Table -->
    <div class="row">
        <div class="col-12">
            <div class="modern-card animate-card">
                <div class="card-header">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-crown me-3"></i>
                            <h4 class="mb-0">Top khách hàng có giá trị cao</h4>
                        </div>
                        <div>
                            <button class="btn btn-outline-light btn-sm" onclick="exportToExcel()">
                                <i class="fas fa-download me-1"></i>Export
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (customerSegments.Any())
                    {
                        <div class="table-responsive">
                            <table class="table data-table-modern mb-0" id="customerTable">
                                <thead>
                                    <tr>
                                        <th scope="col" style="width: 60px;">#</th>
                                        <th scope="col">Khách hàng</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Hạng</th>
                                        <th scope="col">Giá trị LTV</th>
                                        <th scope="col">Số đơn</th>
                                        <th scope="col">Đơn cuối</th>
                                        <th scope="col">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        int customerIndex = 1;
                                    }
                                    @foreach (var customer in customerSegments.Take(20))
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center justify-content-center">
                                                    <span class="badge bg-primary rounded-pill">@customerIndex</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="customer-avatar">
                                                        @(string.IsNullOrEmpty(customer.CustomerName) ? "N" : customer.CustomerName.Substring(0, 1).ToUpper())
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-1 fw-bold">@(customer.CustomerName ?? "N/A")</h6>
                                                        <small class="text-muted">ID: @customer.CustomerId</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-envelope me-2 text-muted"></i>
                                                    <span>@(customer.Email ?? "N/A")</span>
                                                </div>
                                            </td>
                                            <td>
                                                @{
                                                    var tier = customer.Tier ?? "Standard";
                                                    var tierClass = tier.ToLower() switch
                                                    {
                                                        "vip" => "tier-vip",
                                                        "gold" => "tier-gold",
                                                        "silver" => "tier-silver",
                                                        _ => "tier-standard"
                                                    };
                                                }
                                                <span class="tier-badge @tierClass">@tier</span>
                                            </td>
                                            <td>
                                                <div class="value-display">
                                                    💎 @customer.LifetimeValue.ToString("N0") ₫
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-shopping-bag me-2 text-primary"></i>
                                                    <span class="fw-bold">@customer.OrderCount</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-calendar me-2 text-success"></i>
                                                    <span>@customer.LastOrderDate.ToString("dd/MM/yyyy")</span>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-primary btn-sm view-details-btn"
                                                            data-customer-id="@customer.CustomerId"
                                                            data-customer-name="@(customer.CustomerName ?? "N/A")"
                                                            data-customer-email="@(customer.Email ?? "")"
                                                            data-customer-tier="@tier"
                                                            data-customer-ltv="@customer.LifetimeValue.ToString("N0")"
                                                            data-customer-orders="@customer.OrderCount"
                                                            data-customer-last-order="@customer.LastOrderDate.ToString("dd/MM/yyyy")"
                                                            title="Xem chi tiết đơn hàng">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        customerIndex++;
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-users-slash"></i>
                            <h4 class="text-muted mb-3">Không có dữ liệu khách hàng</h4>
                            <p class="text-muted mb-4">Vui lòng kiểm tra kết nối API hoặc thử tải dữ liệu mẫu để xem trước giao diện.</p>
                            <button class="btn btn-modern" onclick="loadSampleData()">
                                <i class="fas fa-database me-2"></i>Tải dữ liệu mẫu
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Customer Orders Modal -->
<div class="modal fade" id="customerOrdersModal" tabindex="-1" aria-labelledby="customerOrdersModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <div class="d-flex align-items-center">
                    <i class="fas fa-receipt me-3"></i>
                    <div>
                        <h4 class="mb-1" id="customerOrdersModalLabel">Đơn hàng của khách hàng</h4>
                        <small class="opacity-75" id="customerModalSubtitle">Chi tiết lịch sử mua hàng</small>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Customer Info Card -->
                <div class="customer-info-card">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <div class="customer-detail-avatar" id="modalCustomerAvatar">N</div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="mb-1 fw-bold" id="modalCustomerName">Tên khách hàng</h5>
                                    <p class="mb-0 text-muted">
                                        <i class="fas fa-envelope me-2"></i>
                                        <span id="modalCustomerEmail">email@example.com</span>
                                    </p>
                                </div>
                                <div class="col-md-6 text-end">
                                    <div class="d-flex justify-content-end gap-2">
                                        <span class="tier-badge tier-standard" id="modalCustomerTier">Standard</span>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted">ID: <span id="modalCustomerId">0</span></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="bg-white rounded-3 p-3 text-center">
                            <i class="fas fa-shopping-cart fa-2x text-primary mb-2"></i>
                            <h5 class="mb-1" id="modalTotalOrders">0</h5>
                            <small class="text-muted">Tổng đơn hàng</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="bg-white rounded-3 p-3 text-center">
                            <i class="fas fa-coins fa-2x text-success mb-2"></i>
                            <h5 class="mb-1" id="modalLifetimeValue">0 ₫</h5>
                            <small class="text-muted">Giá trị LTV</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="bg-white rounded-3 p-3 text-center">
                            <i class="fas fa-calendar fa-2x text-warning mb-2"></i>
                            <h5 class="mb-1" id="modalLastOrder">--/--/----</h5>
                            <small class="text-muted">Đơn cuối</small>
                        </div>
                    </div>
                </div>

                <!-- Orders Loading State -->
                <div id="ordersLoadingState" class="text-center py-5" style="display: none;">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Đang tải danh sách đơn hàng...</p>
                </div>

                <!-- Orders List -->
                <div id="ordersList">
                    <!-- Orders will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Đóng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.bootstrap5.min.css">

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize animations
            $('.animate-card').each(function(index) {
                $(this).css('animation-delay', (index * 0.1) + 's');
            });

            // Initialize DataTable
            if ($('#customerTable').length > 0) {
                try {
                    $('#customerTable').DataTable({
                        language: {
                            url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/Vietnamese.json',
                            emptyTable: "Không có dữ liệu khách hàng",
                            zeroRecords: "Không tìm thấy dữ liệu phù hợp"
                        },
                        pageLength: 10,
                        order: [[4, 'desc']], // Sort by lifetime value
                        responsive: true,
                        dom: 'Bfrtip',
                        buttons: [
                            {
                                extend: 'copy',
                                className: 'btn btn-outline-primary btn-sm'
                            },
                            {
                                extend: 'excel',
                                className: 'btn btn-outline-success btn-sm'
                            },
                            {
                                extend: 'pdf',
                                className: 'btn btn-outline-danger btn-sm'
                            }
                        ],
                        columnDefs: [
                            { targets: [0, 3, 4, 5, 6, 7], className: 'text-center' },
                            { targets: [1, 2], className: 'text-start' }
                        ],
                        drawCallback: function() {
                            $('.tier-badge, .btn').tooltip();
                        }
                    });
                } catch (error) {
                    console.error('DataTable error:', error);
                }
            }

            // View Details Button Click Handler
            $(document).on('click', '.view-details-btn', function() {
                var customerId = $(this).data('customer-id');
                var customerName = $(this).data('customer-name');
                var customerEmail = $(this).data('customer-email');
                var customerTier = $(this).data('customer-tier');
                var customerLtv = $(this).data('customer-ltv');
                var customerOrders = $(this).data('customer-orders');
                var customerLastOrder = $(this).data('customer-last-order');

                // Validate email before making request
                if (!customerEmail || customerEmail === 'N/A' || customerEmail.trim() === '') {
                    showErrorNotification('Email khách hàng không hợp lệ');
                    return;
                }

                // Update modal content
                $('#modalCustomerName').text(customerName || 'N/A');
                $('#modalCustomerEmail').text(customerEmail);
                $('#modalCustomerId').text(customerId);
                $('#modalCustomerAvatar').text((customerName || 'N').charAt(0).toUpperCase());
                $('#modalTotalOrders').text(customerOrders || '0');
                $('#modalLifetimeValue').text((customerLtv || '0') + ' ₫');
                $('#modalLastOrder').text(customerLastOrder || '--/--/----');

                // Update customer tier badge
                var tierClass = (customerTier || 'standard').toLowerCase() === 'vip' ? 'tier-vip' :
                               (customerTier || 'standard').toLowerCase() === 'gold' ? 'tier-gold' :
                               (customerTier || 'standard').toLowerCase() === 'silver' ? 'tier-silver' : 'tier-standard';
                $('#modalCustomerTier').removeClass('tier-vip tier-gold tier-silver tier-standard').addClass(tierClass).text(customerTier || 'Standard');

                // Show modal
                $('#customerOrdersModal').modal('show');

                // Load customer orders
                loadCustomerOrders(customerEmail);
            });
        });

        function loadCustomerOrders(email) {
            if (!email || email === 'N/A' || email.trim() === '') {
                showErrorNotification('Email không hợp lệ');
                return;
            }

            // Show loading state
            $('#ordersLoadingState').show();
            $('#ordersList').html('');

            $.get(`/Admin/ThongKe/GetCustomerOrders?email=${encodeURIComponent(email)}`)
                .done(function (result) {
                    $('#ordersLoadingState').hide();
                    if (result.isSuccess) {
                        displayCustomerOrders(result.data || []);
                    } else {
                        showErrorNotification(result.message || 'Lỗi khi tải đơn hàng');
                        displayCustomerOrders([]);
                    }
                })
                .fail(function(xhr, status, error) {
                    $('#ordersLoadingState').hide();
                    console.error('AJAX Error:', error);
                    showErrorNotification(`Lỗi kết nối: ${error}`);
                    displayCustomerOrders([]);
                });
        }

        function displayCustomerOrders(orders) {
            if (!orders || orders.length === 0) {
                $('#ordersList').html(`
                    <div class="order-empty-state">
                        <i class="fas fa-shopping-cart"></i>
                        <h5>Chưa có đơn hàng nào</h5>
                        <p class="text-muted">Khách hàng này chưa thực hiện đơn hàng nào.</p>
                    </div>
                `);
                return;
            }

            let ordersHtml = `
                <div class="d-flex align-items-center justify-content-between mb-3">
                    <h6 class="mb-0"><i class="fas fa-list me-2"></i>Danh sách đơn hàng (${orders.length})</h6>
                </div>
                <div class="row">
            `;

            orders.forEach(function(order, index) {
                let status = (order.status || 'pending').toLowerCase();
                let statusClass = 'status-' + status;
                let statusText = getStatusText(status);
                let paymentStatus = (order.paymentStatus || 'unpaid').toLowerCase();
                let paymentClass = 'payment-' + paymentStatus;
                let paymentText = getPaymentStatusText(paymentStatus);

                // parse ngày từ ISO string
                let orderDate = new Date(order.orderDate || Date.now());

                // đảm bảo TotalAmount là số
                let totalAmount = Number(order.totalAmount) || 0;

                ordersHtml += `
                    <div class="col-12 mb-3">
                        <div class="order-card ${statusClass}" style="animation: fadeInUp 0.6s ease ${index * 0.1}s both;">
                            <div class="row align-items-center">
                                <div class="col-md-3">
                                    <div class="fw-bold text-primary">#${order.orderId || 'N/A'}</div>
                                    <small class="text-muted">
                                        <i class="fas fa-calendar-alt me-1"></i>
                                        ${formatDate(orderDate)}
                                    </small>
                                </div>
                                <div class="col-md-2">
                                    <span class="status-badge ${statusClass}">${statusText}</span>
                                </div>
                                <div class="col-md-2">
                                    <span class="payment-badge ${paymentClass}">${paymentText}</span>
                                </div>
                                <div class="col-md-3">
                                    <div class="fw-bold">${totalAmount.toLocaleString()} ₫</div>
                                    <small class="text-muted">
                                        <i class="fas fa-box me-1"></i>
                                        ${order.itemCount || 0} sản phẩm
                                    </small>
                                </div>
                                <div class="col-md-2 text-end">
                                    <div class="d-flex gap-1 justify-content-end">
                                        <button class="btn btn-outline-primary btn-sm" onclick="viewOrderDetails('${order.orderId}')" title="Xem chi tiết">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-success btn-sm" onclick="printInvoice('${order.orderId}')" title="In hóa đơn">
                                            <i class="fas fa-print"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            ordersHtml += '</div>';
            $('#ordersList').html(ordersHtml);
        }

        function getStatusText(status) {
            const statusMap = {
                'completed': 'Hoàn thành',
                'processing': 'Đang xử lý',
                'pending': 'Chờ xác nhận',
                'cancelled': 'Đã hủy',
                'shipped': 'Đã giao',
                'delivered': 'Đã nhận'
            };
            return statusMap[status] || status;
        }

        function getPaymentStatusText(paymentStatus) {
            const paymentMap = {
                'paid': 'Đã thanh toán',
                'unpaid': 'Chưa thanh toán',
                'partial': 'Thanh toán một phần',
                'refunded': 'Đã hoàn tiền'
            };
            return paymentMap[paymentStatus] || paymentStatus;
        }

        function formatDate(date) {
            try {
                return new Date(date).toLocaleDateString('vi-VN');
            } catch(e) {
                return '--/--/----';
            }
        }

        function viewOrderDetails(orderId) {
            showSuccessNotification(`Xem chi tiết đơn hàng ${orderId}`);
        }

        function printInvoice(orderId) {
            showSuccessNotification(`Đang chuẩn bị in hóa đơn cho đơn hàng ${orderId}`);
        }

        function exportCustomerOrders() {
            var customerName = $('#modalCustomerName').text();
            showSuccessNotification(`Đang xuất báo cáo đơn hàng cho khách hàng: ${customerName}`);
        }

        function exportToExcel() {
            if ($.fn.DataTable.isDataTable('#customerTable')) {
                $('#customerTable').DataTable().button('.buttons-excel').trigger();
            } else {
                showSuccessNotification('Đang chuẩn bị file Excel...');
            }
        }

        function loadSampleData() {
            showSuccessNotification('Chức năng tải dữ liệu mẫu sẽ được triển khai trong phiên bản tiếp theo');
        }

        function showSuccessNotification(message) {
            var notification = `
                <div class="alert alert-success alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; border-radius: 15px; box-shadow: 0 10px 30px rgba(40, 167, 69, 0.3);"
                     role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            $('body').append(notification);

            setTimeout(() => {
                $('.alert-success').fadeOut();
            }, 3000);
        }

        function showErrorNotification(message) {
            var notification = `
                <div class="alert alert-danger alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; border-radius: 15px; box-shadow: 0 10px 30px rgba(220, 53, 69, 0.3);"
                     role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            $('body').append(notification);

            setTimeout(() => {
                $('.alert-danger').fadeOut();
            }, 5000);
        }
    </script>
}