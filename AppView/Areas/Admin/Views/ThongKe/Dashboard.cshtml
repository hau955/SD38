@using AppView.Areas.Admin.ViewModels.ThongKeViewModel
@model DashboardOverviewViewModel
@{
    ViewData["Title"] = ViewBag.Title;
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";

    // Đảm bảo Model không null
    var safeModel = Model ?? new DashboardOverviewViewModel();
    var safeRevenue = safeModel.Revenue ?? new RevenueSummaryViewModel();
    var safeOrders = safeModel.Orders ?? new OrderSummaryViewModel();
    var safeCustomers = safeModel.Customers ?? new CustomerSummaryViewModel();
    var safeInventory = safeModel.Inventory ?? new InventorySummaryViewModel();
    var safeEmployees = safeModel.Employees ?? new EmployeeSummaryViewModel();

    // Đảm bảo có dữ liệu trends cho chart
    var trends = safeRevenue.Trends?.Any() == true ? safeRevenue.Trends : new List<RevenueTrendViewModel>
    {
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-6).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-5).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-4).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-3).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-2).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.AddDays(-1).ToString("dd/MM"), Revenue = 0 },
        new RevenueTrendViewModel { Label = DateTime.Now.ToString("dd/MM"), Revenue = 0 }
    };
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js" 
            onerror="this.onerror=null; this.src='https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js';"></script>
    <style>
        :root {
            --primary-color: #3b82f6;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #06b6d4;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
            --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --gradient-success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --gradient-warning: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --gradient-info: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .container-fluid {
            padding: 2rem;
        }

        .page-title-box {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

            .page-title-box h4 {
                font-weight: 700;
                font-size: 2rem;
                margin: 0;
            }

        .breadcrumb {
            background: transparent;
            margin: 0;
        }

        .breadcrumb-item a {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
        }

        .breadcrumb-item.active {
            color: white;
        }

        .stats-card {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 15px 35px rgba(0,0,0,0.08);
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            height: 100%;
        }

            .stats-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: var(--gradient-primary);
            }

            .stats-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 25px 50px rgba(0,0,0,0.15);
            }

            .stats-card.revenue::before {
                background: var(--gradient-primary);
            }

            .stats-card.orders::before {
                background: var(--gradient-success);
            }

            .stats-card.customers::before {
                background: var(--gradient-warning);
            }

            .stats-card.inventory::before {
                background: var(--gradient-info);
            }

        .stats-icon {
            width: 70px;
            height: 70px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: white;
            margin-bottom: 1rem;
        }

            .stats-icon.revenue {
                background: var(--gradient-primary);
            }

            .stats-icon.orders {
                background: var(--gradient-success);
            }

            .stats-icon.customers {
                background: var(--gradient-warning);
            }

            .stats-icon.inventory {
                background: var(--gradient-info);
            }

        .stats-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--dark-color);
            margin: 0.5rem 0;
        }

        .stats-label {
            color: #64748b;
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 1rem;
        }

        .stats-change {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.875rem;
            font-weight: 600;
        }

            .stats-change.positive {
                background: rgba(16, 185, 129, 0.1);
                color: var(--success-color);
            }

            .stats-change.negative {
                background: rgba(239, 68, 68, 0.1);
                color: var(--danger-color);
            }

        .chart-container {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 15px 35px rgba(0,0,0,0.08);
        }

        .chart-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--dark-color);
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
        }

            .chart-title i {
                margin-right: 0.5rem;
                color: var(--primary-color);
            }

        .canvas-container {
            position: relative;
            height: 400px;
            margin: 1rem 0;
        }

        .quick-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .metric-item {
            background: white;
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.08);
            text-align: center;
            transition: all 0.3s ease;
        }

            .metric-item:hover {
                transform: translateY(-3px);
            }

        .metric-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-color);
        }

        .metric-label {
            color: #64748b;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .progress-custom {
            height: 8px;
            border-radius: 10px;
            background: #e2e8f0;
            margin: 1rem 0;
        }

        .progress-bar-custom {
            height: 100%;
            border-radius: 10px;
            background: var(--gradient-primary);
            transition: width 0.3s ease;
        }

        .error-message {
            background: #fee2e2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }

        @@media (max-width: 768px) {
            .container-fluid

        {
            padding: 1rem;
        }

        .stats-number {
            font-size: 2rem;
        }

        .canvas-container {
            height: 300px;
        }

        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- Page Title -->
        <div class="page-title-box">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h4>@ViewData["Title"]</h4>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/Admin"><i class="fas fa-home me-1"></i>Trang chủ</a></li>
                            <li class="breadcrumb-item active">Thống kê</li>
                        </ol>
                    </nav>
                </div>
                <div class="d-flex align-items-center">
                    <i class="fas fa-chart-line fa-2x opacity-50"></i>
                </div>
            </div>
        </div>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <div class="error-message">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @ViewBag.ErrorMessage
            </div>
        }

        <!-- Debug Information -->
        @if (ViewBag.ShowDebugInfo == true)
        {
            <div class="alert alert-info">
                <h6>Debug Information:</h6>
                <p><strong>Revenue Total:</strong> @safeRevenue.TotalRevenue</p>
                <p><strong>Orders Total:</strong> @safeOrders.TotalOrders</p>
                <p><strong>Trends Count:</strong> @(safeRevenue.Trends?.Count ?? 0)</p>
                <p><strong>API Base URL:</strong> @ViewData["ApiBaseUrl"]</p>
            </div>
        }

        <!-- Summary Cards -->
        <div class="row g-4">
            <div class="col-xl-3 col-md-6">
                <div class="stats-card revenue">
                    <div class="stats-icon revenue">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stats-label">Tổng doanh thu</div>
                    <div class="stats-number" data-target="@safeRevenue.TotalRevenue">@safeRevenue.TotalRevenue.ToString("N0") VNĐ</div>
                    <div class="stats-change @(safeRevenue.RevenueChangePercentage >= 0 ? "positive" : "negative")">
                        <i class="fas fa-arrow-@(safeRevenue.RevenueChangePercentage >= 0 ? "up" : "down") me-1"></i>
                        @safeRevenue.RevenueChangePercentage.ToString("F1")% so với tháng trước
                    </div>
                    <div class="progress-custom">
                        <div class="progress-bar-custom" style="width: @(Math.Min(100, Math.Max(5, (double)safeRevenue.TotalRevenue / 10000000 * 100)))%"></div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="stats-card orders">
                    <div class="stats-icon orders">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div class="stats-label">Tổng đơn hàng</div>
                    <div class="stats-number" data-target="@safeOrders.TotalOrders">@safeOrders.TotalOrders.ToString("N0")</div>
                    <div class="stats-change positive">
                        <i class="fas fa-chart-line me-1"></i>
                        Tỷ lệ chuyển đổi: @safeOrders.ConversionRate.ToString("F1")%
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <span class="text-success"><i class="fas fa-check-circle me-1"></i>@safeOrders.CompletedOrders hoàn thành</span>
                        <span class="text-warning"><i class="fas fa-clock me-1"></i>@safeOrders.PendingOrders đang xử lý</span>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="stats-card customers">
                    <div class="stats-icon customers">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stats-label">Khách hàng</div>
                    <div class="stats-number" data-target="@safeCustomers.NewCustomers">@safeCustomers.NewCustomers.ToString("N0")</div>
                    <div class="stats-change positive">
                        <i class="fas fa-user-plus me-1"></i>
                        Tỷ lệ giữ chân: @safeCustomers.RetentionRate.ToString("F1")%
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <span class="text-info"><i class="fas fa-user-plus me-1"></i>@safeCustomers.NewCustomers mới</span>
                        <span class="text-primary"><i class="fas fa-redo me-1"></i>@safeCustomers.ReturningCustomers quay lại</span>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="stats-card inventory">
                    <div class="stats-icon inventory">
                        <i class="fas fa-boxes"></i>
                    </div>
                    <div class="stats-label">Tồn kho</div>
                    <div class="stats-number" data-target="@safeInventory.ActiveProducts">@safeInventory.ActiveProducts.ToString("N0")</div>
                    <div class="stats-change @(safeInventory.OutOfStockItems > 0 || safeInventory.LowStockItems > 0 ? "negative" : "positive")">
                        <i class="fas fa-@(safeInventory.OutOfStockItems > 0 || safeInventory.LowStockItems > 0 ? "exclamation-triangle" : "check-circle") me-1"></i>
                        @(safeInventory.LowStockItems + safeInventory.OutOfStockItems) sản phẩm cần chú ý
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <span class="text-danger"><i class="fas fa-times-circle me-1"></i>@safeInventory.OutOfStockItems hết hàng</span>
                        <span class="text-warning"><i class="fas fa-exclamation me-1"></i>@safeInventory.LowStockItems sắp hết</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Metrics -->
        <div class="quick-metrics">
            <div class="metric-item">
                <div class="metric-value">@safeRevenue.AverageOrderValue.ToString("N0")</div>
                <div class="metric-label">Giá trị đơn trung bình (VNĐ)</div>
            </div>
            <div class="metric-item">
                <div class="metric-value">@safeOrders.ConversionRate.ToString("F1")%</div>
                <div class="metric-label">Tỷ lệ chuyển đổi</div>
            </div>
            <div class="metric-item">
                <div class="metric-value">@(safeOrders.TotalOrders > 0 && safeCustomers.NewCustomers > 0 ? (safeOrders.TotalOrders / (decimal)Math.Max(1, safeCustomers.NewCustomers)).ToString("F1") : "0")</div>
                <div class="metric-label">Đơn hàng/khách</div>
            </div>
            <div class="metric-item">
                <div class="metric-value">@(safeOrders.TotalOrders > 0 ? (safeOrders.CompletedOrders * 100.0 / Math.Max(1, safeOrders.TotalOrders)).ToString("F1") : "0")%</div>
                <div class="metric-label">Tỷ lệ hoàn thành</div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="row g-4">
            <!-- Revenue Trend Chart -->
            <div class="col-xl-8">
                <div class="chart-container">
                    <div class="chart-title">
                        <i class="fas fa-chart-line"></i>
                        Xu hướng doanh thu (7 ngày qua)
                    </div>
                    <div class="canvas-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Order Status Chart -->
            <div class="col-xl-4">
                <div class="chart-container">
                    <div class="chart-title">
                        <i class="fas fa-chart-pie"></i>
                        Trạng thái đơn hàng
                    </div>
                    <div class="canvas-container">
                        <canvas id="orderStatusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Đợi Chart.js load xong
        function initCharts() {
            // Kiểm tra Chart object có sẵn không
            if (typeof Chart === 'undefined') {
                console.error('Chart.js không được load. Vui lòng kiểm tra kết nối mạng.');
                document.getElementById('revenueChart').innerHTML = '<div class="text-center text-muted">Chart.js không được load</div>';
                document.getElementById('orderStatusChart').innerHTML = '<div class="text-center text-muted">Chart.js không được load</div>';
                return;
            }

            // Chart.js configuration
            Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
            Chart.defaults.color = '#64748b';
            Chart.defaults.responsive = true;
            Chart.defaults.maintainAspectRatio = false;

            // Revenue data - với fallback nếu không có dữ liệu
            const revenueLabels = [@Html.Raw(string.Join(",", trends.Select(t => $"'{t.Label}'")))];
            const revenueData = [@string.Join(",", trends.Select(t => t.Revenue))];

        // Revenue Trend Chart
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        const revenueChart = new Chart(revenueCtx, {
            type: 'line',
            data: {
                labels: revenueLabels.length > 0 ? revenueLabels : ['N/A'],
                datasets: [{
                    label: 'Doanh thu (VNĐ)',
                    data: revenueData.length > 0 ? revenueData : [0],
                    borderColor: '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointRadius: 6,
                    pointBackgroundColor: '#3b82f6',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Doanh thu: ' + Number(context.parsed.y).toLocaleString('vi-VN') + ' VNĐ';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: '#e2e8f0'
                        },
                        ticks: {
                            callback: function(value) {
                                if (value >= 1000000) {
                                    return (value / 1000000).toFixed(0) + 'M';
                                } else if (value >= 1000) {
                                    return (value / 1000).toFixed(0) + 'K';
                                }
                                return value;
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                elements: {
                    point: {
                        hoverRadius: 8
                    }
                }
            }
        });

        // Order Status Chart - với kiểm tra dữ liệu
        const orderStatusCtx = document.getElementById('orderStatusChart').getContext('2d');
        const orderData = [@safeOrders.CompletedOrders, @safeOrders.PendingOrders, @safeOrders.CancelledOrders];
        const hasOrderData = orderData.some(val => val > 0);

        const orderStatusChart = new Chart(orderStatusCtx, {
            type: 'doughnut',
            data: {
                labels: ['Hoàn thành', 'Đang xử lý', 'Đã hủy'],
                datasets: [{
                    data: hasOrderData ? orderData : [1, 0, 0], // Hiển thị dữ liệu mặc định nếu không có data
                    backgroundColor: ['#10b981', '#f59e0b', '#ef4444'],
                    borderWidth: 0,
                    cutout: '70%'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            pointStyle: 'circle'
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                if (!hasOrderData) {
                                    return 'Chưa có dữ liệu';
                                }
                                const label = context.label || '';
                                const value = context.parsed;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : '0';
                                return label + ': ' + value + ' (' + percentage + '%)';
                            }
                        }
                    }
                }
            }
        });

        }

        // Add number animation
        function animateNumbers() {
            const numbers = document.querySelectorAll('.stats-number[data-target]');
            numbers.forEach(number => {
                const targetText = number.getAttribute('data-target');
                const target = parseFloat(targetText.replace(/[^0-9.-]+/g, ""));
                if (isNaN(target)) return;

                let current = 0;
                const increment = target / 100;
                const timer = setInterval(() => {
                    current += increment;
                    if (current >= target) {
                        current = target;
                        clearInterval(timer);
                    }
                    // Giữ nguyên format ban đầu
                    const formatted = Math.floor(current).toLocaleString('vi-VN');
                    if (targetText.includes('VNĐ')) {
                        number.textContent = formatted + ' VNĐ';
                    } else {
                        number.textContent = formatted;
                    }
                }, 20);
            });
        }

        // Initialize animations khi trang load xong
        document.addEventListener('DOMContentLoaded', function() {
            // Kiểm tra các function có tồn tại trước khi gọi
            if (typeof animateNumbers === 'function') {
                setTimeout(animateNumbers, 500);
            }
            if (typeof initCharts === 'function') {
                // Khởi tạo charts sau khi Chart.js load xong
                setTimeout(initCharts, 100);
            }
        });

        // Thêm thông báo nếu không có dữ liệu
        @if (safeRevenue.TotalRevenue == 0 && safeOrders.TotalOrders == 0)
        {
                <text>
                console.warn('Không có dữ liệu thống kê. Vui lòng kiểm tra kết nối API.');
                </text>
        }

        // Error handling để tránh lỗi showToast
        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.error);
            if (e.message.includes('showToast')) {
                console.warn('showToast function not available - this is normal');
            }
        });
    </script>
</body>
</html>