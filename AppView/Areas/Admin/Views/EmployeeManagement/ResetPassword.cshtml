@model AppView.Areas.Admin.ViewModels.EmployeeManagerment.ResetPasswordViewmodelEm
@{
    ViewData["Title"] = "Reset Employee Password";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-key me-2"></i>Reset Employee Password
                    </h5>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-warning mb-4" role="alert">
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="fas fa-exclamation-triangle fa-2x"></i>
                            </div>
                            <div>
                                <h5 class="alert-heading">Security Notice</h5>
                                <p class="mb-0">You are about to reset a password for an employee. Please ensure:</p>
                                <ul class="mb-0">
                                    <li>You have proper authorization to perform this action</li>
                                    <li>The employee has been verified and this request is legitimate</li>
                                    <li>You communicate the new password securely to the employee</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <form id="resetPasswordForm" method="post" asp-action="ResetPassword" asp-controller="EmployeeManagement" asp-area="Admin">
                        <input type="hidden" asp-for="UserId" />
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <div class="mb-4">
                            <div class="form-floating mb-2">
                                <input type="password" class="form-control" id="newPassword" asp-for="NewPassword" required minlength="8" />
                                <label for="newPassword">New Password</label>
                                <span asp-validation-for="NewPassword" class="text-danger"></span>
                                <div class="input-group-append position-absolute end-0 top-50 translate-middle-y me-3" style="z-index: 10;">
                                    <button class="btn btn-sm btn-outline-secondary border-0 toggle-password" type="button" data-target="newPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="password-strength mt-2 mb-3">
                                <div class="progress" style="height: 5px;">
                                    <div id="password-strength-meter" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <small id="passwordStrengthText" class="form-text text-muted">Password strength: <span>Not entered</span></small>
                            </div>

                            <div class="password-tips small text-muted">
                                <p class="mb-1">Password must include:</p>
                                <ul class="ps-3">
                                    <li id="length-check"><span class="text-danger"><i class="fas fa-times-circle"></i></span> At least 8 characters</li>
                                    <li id="uppercase-check"><span class="text-danger"><i class="fas fa-times-circle"></i></span> At least one uppercase letter</li>
                                    <li id="lowercase-check"><span class="text-danger"><i class="fas fa-times-circle"></i></span> At least one lowercase letter</li>
                                    <li id="number-check"><span class="text-danger"><i class="fas fa-times-circle"></i></span> At least one number</li>
                                    <li id="special-check"><span class="text-danger"><i class="fas fa-times-circle"></i></span> At least one special character</li>
                                </ul>
                            </div>
                        </div>

                        <div class="mb-4">
                            <div class="form-floating mb-2">
                                <input type="password" class="form-control" id="confirmPassword" asp-for="ConfirmPassword" required />
                                <label for="confirmPassword">Confirm Password</label>
                                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                                <div class="input-group-append position-absolute end-0 top-50 translate-middle-y me-3" style="z-index: 10;">
                                    <button class="btn btn-sm btn-outline-secondary border-0 toggle-password" type="button" data-target="confirmPassword">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            <div id="password-match-feedback" class="invalid-feedback d-none">
                                Passwords do not match
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2 mt-4">
                            <a href="@Url.Action("Index", "Admin")" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-1"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary" id="resetBtn">
                                <i class="fas fa-save me-1"></i> Reset Password
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle password visibility
            document.querySelectorAll('.toggle-password').forEach(button => {
                button.addEventListener('click', function() {
                    const targetId = this.getAttribute('data-target');
                    const passwordInput = document.getElementById(targetId);
                    const icon = this.querySelector('i');

                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    } else {
                        passwordInput.type = 'password';
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    }
                });
            });

            // Password strength checker
            const newPassword = document.getElementById('newPassword');
            const strengthMeter = document.getElementById('password-strength-meter');
            const strengthText = document.getElementById('passwordStrengthText').querySelector('span');

            // Password validation criteria
            const lengthCheck = document.getElementById('length-check');
            const uppercaseCheck = document.getElementById('uppercase-check');
            const lowercaseCheck = document.getElementById('lowercase-check');
            const numberCheck = document.getElementById('number-check');
            const specialCheck = document.getElementById('special-check');

            newPassword.addEventListener('input', function() {
                const password = newPassword.value;
                let strength = 0;

                // Update criteria checks
                updateCriteriaCheck(lengthCheck, password.length >= 8);
                updateCriteriaCheck(uppercaseCheck, /[A-Z]/.test(password));
                updateCriteriaCheck(lowercaseCheck, /[a-z]/.test(password));
                updateCriteriaCheck(numberCheck, /[0-9]/.test(password));
                updateCriteriaCheck(specialCheck, /[^A-Za-z0-9]/.test(password));

                // Calculate strength
                if (password.length >= 8) strength += 20;
                if (/[A-Z]/.test(password)) strength += 20;
                if (/[a-z]/.test(password)) strength += 20;
                if (/[0-9]/.test(password)) strength += 20;
                if (/[^A-Za-z0-9]/.test(password)) strength += 20;

                // Update UI
                strengthMeter.style.width = strength + '%';

                if (strength === 0) {
                    strengthMeter.className = 'progress-bar';
                    strengthText.textContent = 'Not entered';
                } else if (strength <= 40) {
                    strengthMeter.className = 'progress-bar bg-danger';
                    strengthText.textContent = 'Weak';
                } else if (strength <= 80) {
                    strengthMeter.className = 'progress-bar bg-warning';
                    strengthText.textContent = 'Moderate';
                } else {
                    strengthMeter.className = 'progress-bar bg-success';
                    strengthText.textContent = 'Strong';
                }

                // Check password match
                checkPasswordMatch();
            });

            function updateCriteriaCheck(element, isValid) {
                const icon = element.querySelector('span');
                if (isValid) {
                    icon.className = 'text-success';
                    icon.innerHTML = '<i class="fas fa-check-circle"></i>';
                } else {
                    icon.className = 'text-danger';
                    icon.innerHTML = '<i class="fas fa-times-circle"></i>';
                }
            }

            // Password match validation
            const confirmPassword = document.getElementById('confirmPassword');
            const matchFeedback = document.getElementById('password-match-feedback');

            confirmPassword.addEventListener('input', checkPasswordMatch);

            function checkPasswordMatch() {
                if (confirmPassword.value === '') {
                    matchFeedback.classList.add('d-none');
                    confirmPassword.classList.remove('is-invalid', 'is-valid');
                } else if (newPassword.value === confirmPassword.value) {
                    matchFeedback.classList.add('d-none');
                    confirmPassword.classList.remove('is-invalid');
                    confirmPassword.classList.add('is-valid');
                } else {
                    matchFeedback.classList.remove('d-none');
                    confirmPassword.classList.remove('is-valid');
                    confirmPassword.classList.add('is-invalid');
                }
            }
                 @if (TempData["SuccessMessage"] != null)
        {
                <text>
                Swal.fire({
                    icon: 'success',
                    title: 'Thành công',
                    text: '@TempData["SuccessMessage"]',
                    confirmButtonColor: '#3085d6'
                }).then(() => {
                    window.location.href = '@Url.Action("Index")';
                });
                </text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
                <text>
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: '@TempData["ErrorMessage"]',
                    confirmButtonColor: '#d33'
                });
                </text>
        }
            // Form validation
            const form = document.getElementById('resetPasswordForm');

            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }

                if (newPassword.value !== confirmPassword.value) {
                    event.preventDefault();
                    matchFeedback.classList.remove('d-none');
                    confirmPassword.classList.add('is-invalid');
                }

                form.classList.add('was-validated');
            });
        });
    </script>
}
