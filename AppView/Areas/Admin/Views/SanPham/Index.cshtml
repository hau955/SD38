@model PagedList.IPagedList<WebModels.Models.SanPham>

@{
    ViewData["Title"] = "Danh sách sản phẩm";
}

<style>
    :root {
        --primary-color: #4f46e5;
        --secondary-color: #f8fafc;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --border-color: #e5e7eb;
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .main-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: var(--shadow-lg);
        margin: 2rem auto;
        padding: 2rem;
        max-width: 1200px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 2rem;
        position: relative;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: var(--text-secondary);
        font-size: 1.1rem;
    }

    .alert-modern {
        border: none;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        font-weight: 500;
        box-shadow: var(--shadow);
    }

    .alert-success-modern {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
    }

    .alert-danger-modern {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        color: white;
    }

    .action-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .search-container {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-input {
        border: 2px solid var(--border-color);
        border-radius: 12px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
        min-width: 250px;
    }

        .search-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

    .btn-modern {
        border: none;
        border-radius: 12px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: var(--shadow);
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
        color: white;
    }

        .btn-primary-modern:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            color: white;
        }

    .btn-success-modern {
        background: linear-gradient(135deg, var(--success-color), #059669);
        color: white;
    }

        .btn-success-modern:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            color: white;
        }

    .table-container {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: var(--shadow);
        margin-bottom: 2rem;
    }

    .table-modern {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.95rem;
    }

        .table-modern thead {
            background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
            color: white;
        }

        .table-modern th {
            padding: 1rem;
            font-weight: 600;
            text-align: center;
            border: none;
        }

        .table-modern td {
            padding: 1rem;
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }

        .table-modern tbody tr {
            transition: all 0.3s ease;
        }

            .table-modern tbody tr:hover {
                background: var(--secondary-color);
                transform: scale(1.01);
            }

    .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease;
    }

        .product-image:hover {
            transform: scale(1.1);
        }

    .badge-modern {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .badge-success-modern {
        background: linear-gradient(135deg, var(--success-color), #059669);
        color: white;
    }

    .badge-secondary-modern {
        background: linear-gradient(135deg, #6b7280, #4b5563);
        color: white;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid;
        background: white;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-icon:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

    .btn-info {
        border-color: #3b82f6;
        color: #3b82f6;
    }

        .btn-info:hover {
            background: #3b82f6;
            color: white;
        }

    .btn-warning {
        border-color: var(--warning-color);
        color: var(--warning-color);
    }

        .btn-warning:hover {
            background: var(--warning-color);
            color: white;
        }

    .btn-danger {
        border-color: var(--danger-color);
        color: var(--danger-color);
    }

        .btn-danger:hover {
            background: var(--danger-color);
            color: white;
        }

    /* Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 2rem;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .pagination-info {
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin: 0 1rem;
    }

    .pagination-modern {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .page-link-modern {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 45px;
        height: 45px;
        border-radius: 12px;
        background: white;
        border: 2px solid var(--border-color);
        color: var(--text-primary);
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: var(--shadow);
    }

        .page-link-modern:hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .page-link-modern.active {
            background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
            color: white;
            border-color: var(--primary-color);
        }

        .page-link-modern.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }

        .page-link-modern.prev-next {
            width: auto;
            padding: 0 1rem;
            font-size: 0.9rem;
        }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--text-secondary);
    }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

    .stats-bar {
        background: linear-gradient(135deg, rgba(79, 70, 229, 0.1), rgba(139, 92, 246, 0.1));
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .stat-item {
        text-align: center;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-color);
    }

    .stat-label {
        font-size: 0.9rem;
        color: var(--text-secondary);
    }

    /* Mobile Responsive */
    .mobile-responsive {
        display: none;
    }

    /* Tablet and Mobile Styles */
    .responsive-hide-sm {
        display: table-cell;
    }

    .responsive-show-sm {
        display: none;
    }
    .mobile-stack {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .mobile-full-width {
        width: 100%;
        min-width: 250px;
    }
</style>

<div class="container-fluid">
    <div class="main-container">
        <!-- Header -->
        <div class="page-header">
            <h1 class="page-title">@ViewData["Title"]</h1>
            <p class="page-subtitle">Quản lý danh sách sản phẩm một cách hiệu quả</p>
        </div>

        <!-- Alerts -->
        @if (TempData["Message"] != null)
        {
            <div class="alert-modern alert-success-modern">
                <i class="fas fa-check-circle me-2"></i>
                @TempData["Message"]
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="alert-modern alert-danger-modern">
                <i class="fas fa-exclamation-circle me-2"></i>
                @TempData["Error"]
            </div>
        }

        <!-- Stats Bar -->
        @if (Model != null)
        {
            <div class="stats-bar">
                <div class="stat-item">
                    <div class="stat-number">@Model.TotalItemCount</div>
                    <div class="stat-label">Tổng sản phẩm</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@Model.PageCount</div>
                    <div class="stat-label">Tổng trang</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@Model.PageNumber</div>
                    <div class="stat-label">Trang hiện tại</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">@Model.PageSize</div>
                    <div class="stat-label">Sản phẩm/trang</div>
                </div>
            </div>
        }

        <!-- Action Bar -->
        <div class="action-bar mobile-stack">
            <div class="search-container mobile-stack">
                <form method="get" style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                    <input type="text" name="search" value="@ViewBag.CurrentFilter"
                           class="search-input mobile-full-width" placeholder="Tìm kiếm sản phẩm..." />
                    <button type="submit" class="btn-modern btn-primary-modern">
                        <i class="fas fa-search"></i>
                        Tìm kiếm
                    </button>
                </form>
            </div>
            <a class="btn-modern btn-success-modern" href="@Url.Action("Create")">
                <i class="fas fa-plus"></i>
                Thêm sản phẩm
            </a>
        </div>

        <!-- Table -->
        <div class="table-container" style="overflow-x: auto;">
            <table class="table-modern" style="min-width: 700px;">
                <thead>
                    <tr>
                        <th>
                            @Html.ActionLink("Tên sản phẩm", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter }, new { style = "color: white; text-decoration: none;" })
                        </th>
                        <th>Hình ảnh</th>
                        <th>
                            @Html.ActionLink("Ngày tạo", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter }, new { style = "color: white; text-decoration: none;" })
                        </th>
                        <th>Trạng thái</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Count > 0)
                    {
                        foreach (var sp in Model)
                        {
                            var imageUrl = !string.IsNullOrEmpty(sp.HinhAnh)
                            ? $"{ViewData["ApiBaseUrl"]}{sp.HinhAnh}"
                            : "";

                            <tr>
                                <td>
                                    <strong>@sp.TenSanPham</strong>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(imageUrl))
                                    {
                                        <img src="@($"{imageUrl}?v={DateTime.Now.Ticks}")"
                                             class="product-image" alt="@sp.TenSanPham" />
                                    }
                                    else
                                    {
                                        <div class="text-muted">
                                            <i class="fas fa-image fa-2x"></i>
                                            <br />
                                            <small>Không có ảnh</small>
                                        </div>
                                    }
                                </td>
                                <td>@sp.NgayTao.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <span class="badge-modern @(sp.TrangThai ? "badge-success-modern" : "badge-secondary-modern")">
                                        @(sp.TrangThai ? "Hoạt động" : "Không hoạt động")
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <!-- Nút Xem -->
                                        <form method="get" asp-action="Details" asp-route-id="@sp.IDSanPham">
                                            <button type="submit" class="btn-icon btn-info" title="Xem chi tiết">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </form>

                                        <!-- Nút Sửa -->
                                        <form method="get" asp-action="Edit" asp-route-id="@sp.IDSanPham">
                                            <button type="submit" class="btn-icon btn-warning" title="Chỉnh sửa">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </form>

                                        <!-- Nút Khóa/Mở -->
                                        <form method="post" asp-action="ToggleStatus" asp-route-id="@sp.IDSanPham"
                                              onsubmit="return confirm('Bạn có chắc chắn muốn @(sp.TrangThai ? "khóa" : "mở") sản phẩm này?');">
                                            <button type="submit" class="btn-icon @(sp.TrangThai ? "btn-danger" : "btn-success")"
                                                    title="@(sp.TrangThai ? "Khóa sản phẩm" : "Mở sản phẩm")">
                                                <i class="fas fa-@(sp.TrangThai ? "lock" : "unlock")"></i>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6">
                                <div class="empty-state">
                                    <i class="fas fa-inbox"></i>
                                    <h4>Không có sản phẩm nào</h4>
                                    <p>Hiện tại chưa có sản phẩm nào trong danh sách.</p>
                                    <a href="@Url.Action("Create")" class="btn-modern btn-primary-modern">
                                        <i class="fas fa-plus"></i>
                                        Thêm sản phẩm đầu tiên
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (Model != null && Model.PageCount > 1)
        {
            <div class="pagination-container" style="flex-wrap: wrap;">
                <div class="pagination-info" style="margin-bottom: 1rem;">
                    Hiển thị @((Model.PageNumber - 1) * Model.PageSize + 1) - @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalItemCount))
                    trong tổng số @Model.TotalItemCount sản phẩm
                </div>

                <div class="pagination-modern" style="flex-wrap: wrap;">
                    <!-- First Page -->
                    @if (Model.HasPreviousPage)
                    {
                        @Html.ActionLink("Đầu", "Index", new { page = 1, currentFilter = ViewBag.CurrentFilter },
                        new { @class = "page-link-modern prev-next" })
                                }
                    else
                    {
                        <span class="page-link-modern prev-next disabled">Đầu</span>
                    }

                    <!-- Previous Page -->
                    @if (Model.HasPreviousPage)
                    {
                        @Html.ActionLink("‹", "Index", new { page = Model.PageNumber - 1, currentFilter = ViewBag.CurrentFilter },
                        new { @class = "page-link-modern" })
                                }
                    else
                    {
                        <span class="page-link-modern disabled">‹</span>
                    }

                    <!-- Page Numbers -->
                    @{
                        int startPage = Math.Max(1, Model.PageNumber - 2);
                        int endPage = Math.Min(Model.PageCount, Model.PageNumber + 2);
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == Model.PageNumber)
                        {
                            <span class="page-link-modern active">@i</span>
                        }
                        else
                        {
                            @Html.ActionLink(i.ToString(), "Index", new { page = i, currentFilter = ViewBag.CurrentFilter },
                            new { @class = "page-link-modern" })
                                }
                                }

                <!-- Next Page -->
                @if (Model.HasNextPage)
                {
                    @Html.ActionLink("›", "Index", new { page = Model.PageNumber + 1, currentFilter = ViewBag.CurrentFilter },
                    new { @class = "page-link-modern" })
                                }
                else
                {
                    <span class="page-link-modern disabled">›</span>
                }

                <!-- Last Page -->
                @if (Model.HasNextPage)
                {
                    @Html.ActionLink("Cuối", "Index", new { page = Model.PageCount, currentFilter = ViewBag.CurrentFilter },
                    new { @class = "page-link-modern prev-next" })
                                }
                else
                {
                    <span class="page-link-modern prev-next disabled">Cuối</span>
                }
            </div>
        </div>
                }
    </div>
</div>

<!-- Script để cải thiện UX -->
<script>
    // Smooth scrolling khi click pagination
    document.querySelectorAll('.page-link-modern').forEach(link => {
        link.addEventListener('click', function(e) {
            if (!this.classList.contains('disabled')) {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });
    });

    // Auto-hide alerts after 5 seconds
    setTimeout(() => {
        document.querySelectorAll('.alert-modern').forEach(alert => {
            alert.style.opacity = '0';
            alert.style.transform = 'translateY(-20px)';
            setTimeout(() => alert.remove(), 300);
        });
    }, 5000);

    // Loading animation for buttons - CẢI THIỆN ĐỂ KHÔNG CHẶN NAVIGATION
    document.querySelectorAll('form button').forEach(button => {
        button.addEventListener('click', function(e) {
            if (this.type === 'submit') {
                // Chỉ show loading trong 1 giây để user thấy feedback
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

                // Không disable button để form vẫn submit được
                // this.disabled = true; // BỎ DÒNG NÀY

                // Tự động restore button sau 3 giây nếu form chưa submit
                setTimeout(() => {
                    if (this.innerHTML.includes('fa-spinner')) {
                        this.innerHTML = this.getAttribute('data-original-text') || 'Submit';
                        this.disabled = false;
                    }
                }, 3000);
            }
        });
    });

    // Lưu text gốc của button để restore
    document.querySelectorAll('form button').forEach(button => {
        button.setAttribute('data-original-text', button.innerHTML);
    });

    // Debug: Log khi click vào button để kiểm tra
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', function(e) {
            console.log('Form submitted:', this.action);
            console.log('Method:', this.method);
        });
    });
</script>